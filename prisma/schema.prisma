// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Color {
  White
  Blue
  Black
  Red
  Green
}

enum Legalities {
  Banned
  Restricted
  Legal
  NotLegal
}

model Format {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  // legalCard        Card     @relation("legal_formats_fkeys", fields: [legalCardId], references: [id])
  // legalCardId      String
  // bannedCard       Card     @relation("banned_formats_fkeys", fields: [bannedCardId], references: [id])
  // bannedCardId     String
  // restricted       Card     @relation("restricted_formats_fkeys", fields: [restrictedCardId], references: [id])
  // restrictedCardId String
}

model Rarity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?
}

model Card {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @unique
  hasFoilVersion Boolean
  setId          Set[]
  manaCost       String[]
  cardVisual     CardVisual[]
  color          Color[]
  TypeId         CardType[]
  superTypeId    CardSuperType[]
  subTypeId      CardSubType[]
  // legal          Format[]        @relation("legal_formats_fkeys")
  // banned         Format[]        @relation("banned_formats_fkeys")
  // restricted     Format[]        @relation("restricted_formats_fkeys")
  formatId       String
  rarity         Rarity[]
  flavorText     FlavorText[]
  cardLegality   CardLegality?
}

model Set {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  cardId     Card[]
  iconUrl    String?
  FlavorText FlavorText[]
}

model CardVisual {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    String
  url       String
  card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?
}

model FlavorText {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String?
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  set       Set      @relation(fields: [setId], references: [id])
  setId     String
}

model CardType {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  card        Card?         @relation(fields: [cardId], references: [id])
  cardId      String?
  cardSubType CardSubType[]
}

model CardSuperType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?
}

model CardSubType {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  cardType   CardType @relation(fields: [cardTypeId], references: [id])
  cardTypeId String
  card       Card?    @relation(fields: [cardId], references: [id])
  cardId     String?
}

model CardLegality {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  card            Card       @relation(fields: [cardId], references: [id])
  cardId          String     @unique
  standard        Legalities @default(NotLegal)
  future          Legalities @default(NotLegal)
  historic        Legalities @default(NotLegal)
  gladiator       Legalities @default(NotLegal)
  pioneer         Legalities @default(NotLegal)
  explorer        Legalities @default(NotLegal)
  modern          Legalities @default(NotLegal)
  legacy          Legalities @default(NotLegal)
  pauper          Legalities @default(NotLegal)
  vintage         Legalities @default(NotLegal)
  penny           Legalities @default(NotLegal)
  commander       Legalities @default(NotLegal)
  oathbreaker     Legalities @default(NotLegal)
  brawl           Legalities @default(NotLegal)
  historicBrawl   Legalities @default(NotLegal)
  alchemy         Legalities @default(NotLegal)
  pauperCommander Legalities @default(NotLegal)
  duel            Legalities @default(NotLegal)
  oldschool       Legalities @default(NotLegal)
  premodern       Legalities @default(NotLegal)
  preedh          Legalities @default(NotLegal)
}
