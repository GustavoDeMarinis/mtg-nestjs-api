// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Color {
  White
  Blue
  Black
  Red
  Green
}

enum Legalities {
  Banned
  Restricted
  NotLegal
  Legal
}

model SetType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  set       Set[]
}

model ManaCost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
  symbol    String
}

enum Rarity {
  Basic
  Common
  Uncommon
  Rare
  Mythic
}

model Card {
  id                      String         @id @default(cuid())
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  name                    String         @unique
  isFoil                  Boolean
  manaCost                String[]
  cardImageUrl            String
  colorIdentity           Color[]
  flavorText              String?
  power                   String?
  toughness               String?
  // TypeId                  CardType[]
  // superTypeId             CardSuperType[]
  // subTypeId               CardSubType[]
  rarity                  Rarity
  set                     Set            @relation(fields: [setId], references: [id])
  setId                   String
  standardLegality        Legalities     @default(NotLegal)
  futureLegality          Legalities     @default(NotLegal)
  historicLegality        Legalities     @default(NotLegal)
  gladiatorLegality       Legalities     @default(NotLegal)
  pioneerLegality         Legalities     @default(NotLegal)
  explorerLegality        Legalities     @default(NotLegal)
  modernLegality          Legalities     @default(NotLegal)
  legacyLegality          Legalities     @default(NotLegal)
  pauperLegality          Legalities     @default(NotLegal)
  vintageLegality         Legalities     @default(NotLegal)
  pennyLegality           Legalities     @default(NotLegal)
  commanderLegality       Legalities     @default(NotLegal)
  oathbreakerLegality     Legalities     @default(NotLegal)
  brawlLegality           Legalities     @default(NotLegal)
  historicBrawlLegality   Legalities     @default(NotLegal)
  alchemyLegality         Legalities     @default(NotLegal)
  pauperCommanderLegality Legalities     @default(NotLegal)
  duelLegality            Legalities     @default(NotLegal)
  oldschoolLegality       Legalities     @default(NotLegal)
  premodernLegality       Legalities     @default(NotLegal)
  preedhLegality          Legalities     @default(NotLegal)
  cardType                CardType?      @relation(fields: [cardTypeId], references: [id])
  cardTypeId              String?
  cardSuperType           CardSuperType? @relation(fields: [cardSuperTypeId], references: [id])
  cardSuperTypeId         String?
  cardSubType             CardSubType?   @relation(fields: [cardSubTypeId], references: [id])
  cardSubTypeId           String?
}

model Set {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  iconUrl     String?
  name        String
  releaseDate DateTime
  card        Card[]
  setType     SetType  @relation(fields: [setTypeId], references: [id])
  setTypeId   String
}

model CardType {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  card        Card[]
  cardSubType CardSubType[]
}

model CardSuperType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  card      Card[]
}

model CardSubType {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  cardType   CardType @relation(fields: [cardTypeId], references: [id])
  cardTypeId String
  card       Card[]
}
